<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nankingdata.yc.work.models.dao.WorkDao">
    <select id="querySubmitRecordByPage" parameterType="java.util.Map"
            resultType="com.nankingdata.yc.work.models.dto.ShowWorkAuditConditionDto">
        select
        wad.id,
        sc1.`name` as audit_status,
        wa.work_name,
        wa.work_content,
        wa.work_instructor,
        wa.work_minutes,
        wa.origin_work_id,
        sc3.name as work_priority,
        wad.audit_time as time,
        wad.audit_fail_reason,
        sc2.`name` as workFrom,
        wa.origin_work_id
        from work_audit_detail as wad
        left join work_audit as wa
        on wad.audit_item_id=wa.id
        left join sys_config as sc1
        on wad.audit_status=sc1.code
        left join sys_config as sc2
        on wa.work_from=sc2.code
        left join sys_config as sc3
        on wa.work_priority=sc3.code
        <where>
            wa.work_user_id=#{userId}
            <if test="workName!=null">
                and locate(#{workName},work_name)
            </if>
            <if test="auditStatus!=null">
                and wad.audit_status = #{auditStatus}
            </if>
            <if test="workFrom!=null">
                and wa.work_from like #{workFrom}
            </if>
        </where>
        order by wa.audit_submit_time desc
        limit #{pageStart},#{pageSize}
    </select>
    <select id="querySubmitRecordCount" parameterType="java.util.Map"
            resultType="Integer">
        select count(*)
        from work_audit_detail as wad
        left join work_audit as wa
        on wad.audit_item_id=wa.id
        left join sys_config as sc1
        on wad.audit_status=sc1.code
        <where>
            wa.work_user_id=#{userId}
            <if test="workName!=null">
                and locate(#{workName},work_name)
            </if>
            <if test="auditStatus!=null">
                and wad.audit_status = #{auditStatus}
            </if>
            <if test="workFrom!=null">
                and wa.work_from = #{workFrom}
            </if>
        </where>
    </select>
    <select id="queryUnAddWork" parameterType="java.util.Map"
            resultType="com.nankingdata.yc.work.models.domain.WorkPool">
        select
        wp.id,
        wp.work_name,
        wp.work_content,
        wp.work_instructor,
        wp.work_minutes,
        wp.work_from,
        sc.name as work_priority,
        wp.create_time,
        wp.update_time,
        wp.user_id,
        users.real_name as employeeName
        from work_pool as wp
        left join usermanagement.users
        on users.id=wp.user_id
        left join sys_config as sc
        on sc.code=wp.work_priority
        <where>
            wp.work_from='w3'
            <if test="scheduleId!=null">
                and wp.id not in (
                select work_id
                from work_schedule_detail as wsd
                where schedule_id=#{scheduleId})
            </if>
            and wp.user_id=#{userId}
            <if test="workName!=null">
                and locate(#{workName},work_name)
            </if>
            and wp.delete_status='no'
            and wp.audit_status='agree'
        </where>
        order by update_time desc ,create_time desc
    </select>
    <select id="queryWorkPoolCount" parameterType="java.util.Map" resultType="Integer">
        select
        count(*)
        from work_pool as wp
        <where>
            <if test="employeeId!=null">
                wp.user_id=#{employeeId}
            </if>
            <if test="workName!=null">
                and locate(#{workName},wp.work_name)
            </if>
            and wp.delete_status='no'
        </where>
    </select>
    <insert id="addAgreeWork" parameterType="com.nankingdata.yc.work.models.domain.WorkPool" useGeneratedKeys="true"
            keyProperty="id">
        insert into
        work_pool(user_id,work_name,work_content,work_instructor,work_minutes,work_from,create_time,update_time)
        values
        <foreach collection="list" item="item" separator=",">
            (#{item.userId},#{item.workName},#{item.workContent},#{item.workInstructor},#{item.workMinutes},#{item.workFrom},#{item.createTime},NOW())
        </foreach>
    </insert>
    <update id="updateAgreeWork" parameterType="com.nankingdata.yc.work.models.domain.WorkPool">
        update work_pool
        set work_name=
        <foreach collection="list" item="item" index="index"
                 separator=" " open="case id" close="end">
            when #{item.id} then #{item.workName}
        </foreach>,
        work_content=
        <foreach collection="list" item="item" index="index"
                 separator=" " open="case id" close="end">
            when #{item.id} then #{item.workContent}
        </foreach>,
        work_instructor=
        <foreach collection="list" item="item" index="index"
                 separator=" " open="case id" close="end">
            when #{item.id} then #{item.workInstructor}
        </foreach>,
        work_minutes=
        <foreach collection="list" item="item" index="index"
                 separator=" " open="case id" close="end">
            when #{item.id} then #{item.workMinutes}
        </foreach>,
        work_from=
        <foreach collection="list" item="item" index="index"
                 separator=" " open="case id" close="end">
            when #{item.id} then #{item.workFrom}
        </foreach>,
        update_time = NOW(),
        audit_status='agree'
        where id in
        (
        <foreach collection="list" item="item" separator=",">
            #{item.id}
        </foreach>
        )
    </update>
    <select id="queryWorks" resultType="com.nankingdata.yc.work.models.domain.WorkPool"
            parameterType="java.util.Map">
        select
        wp.id,
        wp.work_name,
        wp.work_content,
        wp.work_instructor,
        wp.work_minutes,
        sc.name as work_priority,
        wp.create_time,
        wp.update_time,
        wp.user_id,
        sc1.name as workFrom,
        users.real_name as employeeName,
        users.department_id as departmentId
        from work_pool wp
        left join usermanagement.`users`
        on wp.user_id=`users`.id
        left join sys_config sc
        on sc.code=wp.work_priority
        left join sys_config sc1
        on sc1.code=wp.work_from
        <where>
            (
            wp.work_from='w3' or (
            wp.work_from='w2' and DATE_FORMAT(wp.create_time,'%Y-%m-%d')= DATE_FORMAT(NOW(),'%Y-%m-%d')
            )
            )
            <if test="employeeId!=null">
                and users.id=#{employeeId}
            </if>
            <if test="workName!=null">
                and locate(#{workName},wp.work_name)
            </if>
            <if test="departmentId!=null">
                and users.department_id=#{departmentId}
            </if>
            <if test="companyId!=null">
                and users.company_id=#{companyId}
            </if>
            and wp.delete_status='no'
            and wp.audit_status='agree'
        </where>
        order by update_time desc,create_time desc
        <if test="pageStart!=null">
        limit #{pageStart},#{pageSize}
        </if>
    </select>
    <select id="queryWorksCount" resultType="Integer" parameterType="java.util.Map">
        select
        count(*)
        from work_pool wp
        left join usermanagement.`users`
        on wp.user_id=`users`.id
        <where>
            (
            wp.work_from='w3' or (
            wp.work_from='w2' and DATE_FORMAT(wp.create_time,'%Y-%m-%d')= DATE_FORMAT(NOW(),'%Y-%m-%d')
            )
            )
            <if test="employeeId!=null">
                and users.id=#{employeeId}
            </if>
            <if test="workName!=null">
                and locate(#{workName},wp.work_name)
            </if>
            <if test="departmentId!=null">
                and users.department_id=#{departmentId}
            </if>
            <if test="companyId!=null">
                and users.company_id=#{companyId}
            </if>
            and wp.delete_status='no'
            and wp.audit_status='agree'
        </where>
    </select>
    <insert id="addWork" parameterType="com.nankingdata.yc.work.models.domain.WorkPool" useGeneratedKeys="true"
            keyProperty="id">
        insert into
        work_pool(user_id,work_name,work_content,work_instructor,work_minutes,work_from,allot_user_id,create_time,update_time,work_priority)
        values
        <foreach collection="list" item="item" separator=",">
            (#{item.userId},#{item.workName},#{item.workContent},#{item.workInstructor},#{item.workMinutes},#{item.workFrom},#{item.allotUserId},NOW(),NOW(),#{item.workPriority})
        </foreach>
    </insert>
    <update id="updateWork" parameterType="com.nankingdata.yc.work.models.domain.WorkPool">
        update work_pool
        set work_name=#{workName},work_content=#{workContent},work_minutes=#{workMinutes},work_instructor=#{workInstructor},work_priority=#{workPriority},work_from=#{workFrom}
        where id=#{id}
    </update>
    <select id="queryWorkPool" resultType="com.nankingdata.yc.work.models.domain.WorkPool"
            parameterType="com.nankingdata.yc.work.models.domain.WorkPool">
        select *
        from work_pool
        where id in
        <foreach collection="list" item="item" open="(" close=")" separator=",">
            #{item.id}
        </foreach>
        and delete_status='no'
        order by update_time desc,create_time desc
    </select>
    <delete id="deleteWork" parameterType="Integer">
        update work_pool
        set delete_status='yes'
        where id=#{workId}
    </delete>
    <select id="queryWorkById" parameterType="Integer" resultType="com.nankingdata.yc.work.models.domain.WorkPool">
        select *
        from work_pool
        where id=#{id}
    </select>
    <update id="updateWorkAuditStatus" parameterType="java.util.Map">
        update work_pool
        set audit_status=
        <foreach collection="list" item="item" open="case id" close="end" separator=" ">
            when #{item.id} then #{item.auditStatus}
        </foreach>
        where id in
        <foreach collection="list" separator="," open="(" close=")" item="item">
            #{item.id}
        </foreach>
    </update>
    <select id="queryWorkFinishStatus" parameterType="java.util.Map"
            resultType="com.nankingdata.yc.work.models.bo.FinishConditionBo">
        select users.id as empId,users.real_name as empName,wsd.finish_status,count(*) as count
        from work_schedule_detail as wsd
        left join work_schedule as ws
        on wsd.schedule_id=ws.id
        left join usermanagement.users
        on users.id=ws.user_id
        <where>
            ws.submit_status = 'submitted'
            <if test="beginTime!=null">
                and DATE_FORMAT(ws.`date`,'%Y-%m-%d') &gt;= DATE_FORMAT(#{beginTime},'%Y-%m-%d')
            </if>
            <if test="endTime!=null">
                and DATE_FORMAT(ws.`date`,'%Y-%m-%d') &lt;= DATE_FORMAT(#{endTime},'%Y-%m-%d')
            </if>
            <if test="empId!=null">
                and user_id=#{empId}
            </if>
        </where>
        GROUP by user_id,wsd.finish_status
        order by user_id asc,finish_status
    </select>
    <update id="beginWork" parameterType="Integer">
        update work_schedule_detail
        set begin_time=NOW(),finish_status='underway'
        where id=#{id}
    </update>
</mapper>